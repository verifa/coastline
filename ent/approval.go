// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/verifa/coastline/ent/approval"
)

// Approval is the model entity for the Approval schema.
type Approval struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IsAutomated holds the value of the "is_automated" field.
	IsAutomated bool `json:"is_automated,omitempty"`
	// Approver holds the value of the "approver" field.
	Approver string `json:"approver,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApprovalQuery when eager-loading is set.
	Edges ApprovalEdges `json:"edges"`
}

// ApprovalEdges holds the relations/edges for other nodes in the graph.
type ApprovalEdges struct {
	// Request holds the value of the Request edge.
	Request []*Request `json:"Request,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RequestOrErr returns the Request value or an error if the edge
// was not loaded in eager-loading.
func (e ApprovalEdges) RequestOrErr() ([]*Request, error) {
	if e.loadedTypes[0] {
		return e.Request, nil
	}
	return nil, &NotLoadedError{edge: "Request"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Approval) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case approval.FieldIsAutomated:
			values[i] = new(sql.NullBool)
		case approval.FieldApprover:
			values[i] = new(sql.NullString)
		case approval.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Approval", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Approval fields.
func (a *Approval) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case approval.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case approval.FieldIsAutomated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_automated", values[i])
			} else if value.Valid {
				a.IsAutomated = value.Bool
			}
		case approval.FieldApprover:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approver", values[i])
			} else if value.Valid {
				a.Approver = value.String
			}
		}
	}
	return nil
}

// QueryRequest queries the "Request" edge of the Approval entity.
func (a *Approval) QueryRequest() *RequestQuery {
	return (&ApprovalClient{config: a.config}).QueryRequest(a)
}

// Update returns a builder for updating this Approval.
// Note that you need to call Approval.Unwrap() before calling this method if this Approval
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Approval) Update() *ApprovalUpdateOne {
	return (&ApprovalClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Approval entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Approval) Unwrap() *Approval {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Approval is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Approval) String() string {
	var builder strings.Builder
	builder.WriteString("Approval(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("is_automated=")
	builder.WriteString(fmt.Sprintf("%v", a.IsAutomated))
	builder.WriteString(", ")
	builder.WriteString("approver=")
	builder.WriteString(a.Approver)
	builder.WriteByte(')')
	return builder.String()
}

// Approvals is a parsable slice of Approval.
type Approvals []*Approval

func (a Approvals) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
