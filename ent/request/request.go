// Code generated by ent, DO NOT EDIT.

package request

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the request type in the database.
	Label = "request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldRequestedBy holds the string denoting the requested_by field in the database.
	FieldRequestedBy = "requested_by"
	// FieldSpec holds the string denoting the spec field in the database.
	FieldSpec = "spec"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "Project"
	// EdgeService holds the string denoting the service edge name in mutations.
	EdgeService = "Service"
	// EdgeApprovals holds the string denoting the approvals edge name in mutations.
	EdgeApprovals = "Approvals"
	// Table holds the table name of the request in the database.
	Table = "requests"
	// ProjectTable is the table that holds the Project relation/edge.
	ProjectTable = "requests"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the Project relation/edge.
	ProjectColumn = "request_project"
	// ServiceTable is the table that holds the Service relation/edge.
	ServiceTable = "requests"
	// ServiceInverseTable is the table name for the Service entity.
	// It exists in this package in order to avoid circular dependency with the "service" package.
	ServiceInverseTable = "services"
	// ServiceColumn is the table column denoting the Service relation/edge.
	ServiceColumn = "request_service"
	// ApprovalsTable is the table that holds the Approvals relation/edge. The primary key declared below.
	ApprovalsTable = "approval_Request"
	// ApprovalsInverseTable is the table name for the Approval entity.
	// It exists in this package in order to avoid circular dependency with the "approval" package.
	ApprovalsInverseTable = "approvals"
)

// Columns holds all SQL columns for request fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldRequestedBy,
	FieldSpec,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "requests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"request_project",
	"request_service",
}

var (
	// ApprovalsPrimaryKey and ApprovalsColumn2 are the table columns denoting the
	// primary key for the Approvals relation (M2M).
	ApprovalsPrimaryKey = []string{"approval_id", "request_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// RequestedByValidator is a validator for the "requested_by" field. It is called by the builders before save.
	RequestedByValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
