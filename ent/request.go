// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/verifa/coastline/ent/request"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Request is the model entity for the Request schema.
type Request struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RequestQuery when eager-loading is set.
	Edges RequestEdges `json:"edges"`
}

// RequestEdges holds the relations/edges for other nodes in the graph.
type RequestEdges struct {
	// Project holds the value of the Project edge.
	Project []*Project `json:"Project,omitempty"`
	// Service holds the value of the Service edge.
	Service []*Service `json:"Service,omitempty"`
	// Approvals holds the value of the Approvals edge.
	Approvals []*Approval `json:"Approvals,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading.
func (e RequestEdges) ProjectOrErr() ([]*Project, error) {
	if e.loadedTypes[0] {
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "Project"}
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading.
func (e RequestEdges) ServiceOrErr() ([]*Service, error) {
	if e.loadedTypes[1] {
		return e.Service, nil
	}
	return nil, &NotLoadedError{edge: "Service"}
}

// ApprovalsOrErr returns the Approvals value or an error if the edge
// was not loaded in eager-loading.
func (e RequestEdges) ApprovalsOrErr() ([]*Approval, error) {
	if e.loadedTypes[2] {
		return e.Approvals, nil
	}
	return nil, &NotLoadedError{edge: "Approvals"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Request) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case request.FieldName:
			values[i] = new(sql.NullString)
		case request.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Request", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Request fields.
func (r *Request) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case request.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case request.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		}
	}
	return nil
}

// QueryProject queries the "Project" edge of the Request entity.
func (r *Request) QueryProject() *ProjectQuery {
	return (&RequestClient{config: r.config}).QueryProject(r)
}

// QueryService queries the "Service" edge of the Request entity.
func (r *Request) QueryService() *ServiceQuery {
	return (&RequestClient{config: r.config}).QueryService(r)
}

// QueryApprovals queries the "Approvals" edge of the Request entity.
func (r *Request) QueryApprovals() *ApprovalQuery {
	return (&RequestClient{config: r.config}).QueryApprovals(r)
}

// Update returns a builder for updating this Request.
// Note that you need to call Request.Unwrap() before calling this method if this Request
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Request) Update() *RequestUpdateOne {
	return (&RequestClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Request entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Request) Unwrap() *Request {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Request is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Request) String() string {
	var builder strings.Builder
	builder.WriteString("Request(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Requests is a parsable slice of Request.
type Requests []*Request

func (r Requests) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
