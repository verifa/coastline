// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/verifa/coastline/ent/project"
	"github.com/verifa/coastline/ent/request"
	"github.com/verifa/coastline/ent/schema"
	"github.com/verifa/coastline/ent/service"
)

// Request is the model entity for the Request schema.
type Request struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// RequestedBy holds the value of the "requested_by" field.
	RequestedBy string `json:"requested_by,omitempty"`
	// Status holds the value of the "status" field.
	Status request.Status `json:"status,omitempty"`
	// Spec holds the value of the "spec" field.
	Spec schema.RequestSpec `json:"spec,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RequestQuery when eager-loading is set.
	Edges           RequestEdges `json:"edges"`
	request_project *uuid.UUID
	request_service *uuid.UUID
}

// RequestEdges holds the relations/edges for other nodes in the graph.
type RequestEdges struct {
	// Project holds the value of the Project edge.
	Project *Project `json:"Project,omitempty"`
	// Service holds the value of the Service edge.
	Service *Service `json:"Service,omitempty"`
	// Reviews holds the value of the Reviews edge.
	Reviews []*Review `json:"Reviews,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[0] {
		if e.Project == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "Project"}
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestEdges) ServiceOrErr() (*Service, error) {
	if e.loadedTypes[1] {
		if e.Service == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: service.Label}
		}
		return e.Service, nil
	}
	return nil, &NotLoadedError{edge: "Service"}
}

// ReviewsOrErr returns the Reviews value or an error if the edge
// was not loaded in eager-loading.
func (e RequestEdges) ReviewsOrErr() ([]*Review, error) {
	if e.loadedTypes[2] {
		return e.Reviews, nil
	}
	return nil, &NotLoadedError{edge: "Reviews"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Request) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case request.FieldSpec:
			values[i] = new([]byte)
		case request.FieldType, request.FieldRequestedBy, request.FieldStatus:
			values[i] = new(sql.NullString)
		case request.FieldCreateTime, request.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case request.FieldID:
			values[i] = new(uuid.UUID)
		case request.ForeignKeys[0]: // request_project
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case request.ForeignKeys[1]: // request_service
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Request", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Request fields.
func (r *Request) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case request.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case request.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				r.CreateTime = value.Time
			}
		case request.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				r.UpdateTime = value.Time
			}
		case request.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = value.String
			}
		case request.FieldRequestedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field requested_by", values[i])
			} else if value.Valid {
				r.RequestedBy = value.String
			}
		case request.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = request.Status(value.String)
			}
		case request.FieldSpec:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field spec", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Spec); err != nil {
					return fmt.Errorf("unmarshal field spec: %w", err)
				}
			}
		case request.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field request_project", values[i])
			} else if value.Valid {
				r.request_project = new(uuid.UUID)
				*r.request_project = *value.S.(*uuid.UUID)
			}
		case request.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field request_service", values[i])
			} else if value.Valid {
				r.request_service = new(uuid.UUID)
				*r.request_service = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryProject queries the "Project" edge of the Request entity.
func (r *Request) QueryProject() *ProjectQuery {
	return (&RequestClient{config: r.config}).QueryProject(r)
}

// QueryService queries the "Service" edge of the Request entity.
func (r *Request) QueryService() *ServiceQuery {
	return (&RequestClient{config: r.config}).QueryService(r)
}

// QueryReviews queries the "Reviews" edge of the Request entity.
func (r *Request) QueryReviews() *ReviewQuery {
	return (&RequestClient{config: r.config}).QueryReviews(r)
}

// Update returns a builder for updating this Request.
// Note that you need to call Request.Unwrap() before calling this method if this Request
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Request) Update() *RequestUpdateOne {
	return (&RequestClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Request entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Request) Unwrap() *Request {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Request is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Request) String() string {
	var builder strings.Builder
	builder.WriteString("Request(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("create_time=")
	builder.WriteString(r.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(r.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(r.Type)
	builder.WriteString(", ")
	builder.WriteString("requested_by=")
	builder.WriteString(r.RequestedBy)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", ")
	builder.WriteString("spec=")
	builder.WriteString(fmt.Sprintf("%v", r.Spec))
	builder.WriteByte(')')
	return builder.String()
}

// Requests is a parsable slice of Request.
type Requests []*Request

func (r Requests) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
