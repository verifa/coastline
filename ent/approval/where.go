// Code generated by ent, DO NOT EDIT.

package approval

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/verifa/coastline/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// IsAutomated applies equality check predicate on the "is_automated" field. It's identical to IsAutomatedEQ.
func IsAutomated(v bool) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAutomated), v))
	})
}

// Approver applies equality check predicate on the "approver" field. It's identical to ApproverEQ.
func Approver(v string) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApprover), v))
	})
}

// IsAutomatedEQ applies the EQ predicate on the "is_automated" field.
func IsAutomatedEQ(v bool) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAutomated), v))
	})
}

// IsAutomatedNEQ applies the NEQ predicate on the "is_automated" field.
func IsAutomatedNEQ(v bool) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsAutomated), v))
	})
}

// ApproverEQ applies the EQ predicate on the "approver" field.
func ApproverEQ(v string) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApprover), v))
	})
}

// ApproverNEQ applies the NEQ predicate on the "approver" field.
func ApproverNEQ(v string) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldApprover), v))
	})
}

// ApproverIn applies the In predicate on the "approver" field.
func ApproverIn(vs ...string) predicate.Approval {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldApprover), v...))
	})
}

// ApproverNotIn applies the NotIn predicate on the "approver" field.
func ApproverNotIn(vs ...string) predicate.Approval {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldApprover), v...))
	})
}

// ApproverGT applies the GT predicate on the "approver" field.
func ApproverGT(v string) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldApprover), v))
	})
}

// ApproverGTE applies the GTE predicate on the "approver" field.
func ApproverGTE(v string) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldApprover), v))
	})
}

// ApproverLT applies the LT predicate on the "approver" field.
func ApproverLT(v string) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldApprover), v))
	})
}

// ApproverLTE applies the LTE predicate on the "approver" field.
func ApproverLTE(v string) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldApprover), v))
	})
}

// ApproverContains applies the Contains predicate on the "approver" field.
func ApproverContains(v string) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldApprover), v))
	})
}

// ApproverHasPrefix applies the HasPrefix predicate on the "approver" field.
func ApproverHasPrefix(v string) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldApprover), v))
	})
}

// ApproverHasSuffix applies the HasSuffix predicate on the "approver" field.
func ApproverHasSuffix(v string) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldApprover), v))
	})
}

// ApproverEqualFold applies the EqualFold predicate on the "approver" field.
func ApproverEqualFold(v string) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldApprover), v))
	})
}

// ApproverContainsFold applies the ContainsFold predicate on the "approver" field.
func ApproverContainsFold(v string) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldApprover), v))
	})
}

// HasRequest applies the HasEdge predicate on the "Request" edge.
func HasRequest() predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RequestTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RequestTable, RequestPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequestWith applies the HasEdge predicate on the "Request" edge with a given conditions (other predicates).
func HasRequestWith(preds ...predicate.Request) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RequestInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RequestTable, RequestPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Approval) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Approval) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Approval) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		p(s.Not())
	})
}
