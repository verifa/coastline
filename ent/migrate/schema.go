// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ApprovalsColumns holds the columns for the "approvals" table.
	ApprovalsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "is_automated", Type: field.TypeBool, Default: false},
		{Name: "approver", Type: field.TypeString},
	}
	// ApprovalsTable holds the schema information for the "approvals" table.
	ApprovalsTable = &schema.Table{
		Name:       "approvals",
		Columns:    ApprovalsColumns,
		PrimaryKey: []*schema.Column{ApprovalsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "approval_id",
				Unique:  true,
				Columns: []*schema.Column{ApprovalsColumns[0]},
			},
		},
	}
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:       "projects",
		Columns:    ProjectsColumns,
		PrimaryKey: []*schema.Column{ProjectsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "project_id",
				Unique:  true,
				Columns: []*schema.Column{ProjectsColumns[0]},
			},
		},
	}
	// RequestsColumns holds the columns for the "requests" table.
	RequestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// RequestsTable holds the schema information for the "requests" table.
	RequestsTable = &schema.Table{
		Name:       "requests",
		Columns:    RequestsColumns,
		PrimaryKey: []*schema.Column{RequestsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "request_id",
				Unique:  true,
				Columns: []*schema.Column{RequestsColumns[0]},
			},
		},
	}
	// ServicesColumns holds the columns for the "services" table.
	ServicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// ServicesTable holds the schema information for the "services" table.
	ServicesTable = &schema.Table{
		Name:       "services",
		Columns:    ServicesColumns,
		PrimaryKey: []*schema.Column{ServicesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "service_id",
				Unique:  true,
				Columns: []*schema.Column{ServicesColumns[0]},
			},
		},
	}
	// ApprovalRequestColumns holds the columns for the "approval_Request" table.
	ApprovalRequestColumns = []*schema.Column{
		{Name: "approval_id", Type: field.TypeUUID},
		{Name: "request_id", Type: field.TypeUUID},
	}
	// ApprovalRequestTable holds the schema information for the "approval_Request" table.
	ApprovalRequestTable = &schema.Table{
		Name:       "approval_Request",
		Columns:    ApprovalRequestColumns,
		PrimaryKey: []*schema.Column{ApprovalRequestColumns[0], ApprovalRequestColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "approval_Request_approval_id",
				Columns:    []*schema.Column{ApprovalRequestColumns[0]},
				RefColumns: []*schema.Column{ApprovalsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "approval_Request_request_id",
				Columns:    []*schema.Column{ApprovalRequestColumns[1]},
				RefColumns: []*schema.Column{RequestsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RequestProjectColumns holds the columns for the "request_Project" table.
	RequestProjectColumns = []*schema.Column{
		{Name: "request_id", Type: field.TypeUUID},
		{Name: "project_id", Type: field.TypeUUID},
	}
	// RequestProjectTable holds the schema information for the "request_Project" table.
	RequestProjectTable = &schema.Table{
		Name:       "request_Project",
		Columns:    RequestProjectColumns,
		PrimaryKey: []*schema.Column{RequestProjectColumns[0], RequestProjectColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "request_Project_request_id",
				Columns:    []*schema.Column{RequestProjectColumns[0]},
				RefColumns: []*schema.Column{RequestsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "request_Project_project_id",
				Columns:    []*schema.Column{RequestProjectColumns[1]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RequestServiceColumns holds the columns for the "request_Service" table.
	RequestServiceColumns = []*schema.Column{
		{Name: "request_id", Type: field.TypeUUID},
		{Name: "service_id", Type: field.TypeUUID},
	}
	// RequestServiceTable holds the schema information for the "request_Service" table.
	RequestServiceTable = &schema.Table{
		Name:       "request_Service",
		Columns:    RequestServiceColumns,
		PrimaryKey: []*schema.Column{RequestServiceColumns[0], RequestServiceColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "request_Service_request_id",
				Columns:    []*schema.Column{RequestServiceColumns[0]},
				RefColumns: []*schema.Column{RequestsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "request_Service_service_id",
				Columns:    []*schema.Column{RequestServiceColumns[1]},
				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ApprovalsTable,
		ProjectsTable,
		RequestsTable,
		ServicesTable,
		ApprovalRequestTable,
		RequestProjectTable,
		RequestServiceTable,
	}
)

func init() {
	ApprovalRequestTable.ForeignKeys[0].RefTable = ApprovalsTable
	ApprovalRequestTable.ForeignKeys[1].RefTable = RequestsTable
	RequestProjectTable.ForeignKeys[0].RefTable = RequestsTable
	RequestProjectTable.ForeignKeys[1].RefTable = ProjectsTable
	RequestServiceTable.ForeignKeys[0].RefTable = RequestsTable
	RequestServiceTable.ForeignKeys[1].RefTable = ServicesTable
}
