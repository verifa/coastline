// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/verifa/coastline/ent/approval"
	"github.com/verifa/coastline/ent/request"
)

// ApprovalCreate is the builder for creating a Approval entity.
type ApprovalCreate struct {
	config
	mutation *ApprovalMutation
	hooks    []Hook
}

// SetIsAutomated sets the "is_automated" field.
func (ac *ApprovalCreate) SetIsAutomated(b bool) *ApprovalCreate {
	ac.mutation.SetIsAutomated(b)
	return ac
}

// SetNillableIsAutomated sets the "is_automated" field if the given value is not nil.
func (ac *ApprovalCreate) SetNillableIsAutomated(b *bool) *ApprovalCreate {
	if b != nil {
		ac.SetIsAutomated(*b)
	}
	return ac
}

// SetApprover sets the "approver" field.
func (ac *ApprovalCreate) SetApprover(s string) *ApprovalCreate {
	ac.mutation.SetApprover(s)
	return ac
}

// SetID sets the "id" field.
func (ac *ApprovalCreate) SetID(u uuid.UUID) *ApprovalCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *ApprovalCreate) SetNillableID(u *uuid.UUID) *ApprovalCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// AddRequestIDs adds the "Request" edge to the Request entity by IDs.
func (ac *ApprovalCreate) AddRequestIDs(ids ...uuid.UUID) *ApprovalCreate {
	ac.mutation.AddRequestIDs(ids...)
	return ac
}

// AddRequest adds the "Request" edges to the Request entity.
func (ac *ApprovalCreate) AddRequest(r ...*Request) *ApprovalCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddRequestIDs(ids...)
}

// Mutation returns the ApprovalMutation object of the builder.
func (ac *ApprovalCreate) Mutation() *ApprovalMutation {
	return ac.mutation
}

// Save creates the Approval in the database.
func (ac *ApprovalCreate) Save(ctx context.Context) (*Approval, error) {
	var (
		err  error
		node *Approval
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApprovalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Approval)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ApprovalMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ApprovalCreate) SaveX(ctx context.Context) *Approval {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ApprovalCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ApprovalCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ApprovalCreate) defaults() {
	if _, ok := ac.mutation.IsAutomated(); !ok {
		v := approval.DefaultIsAutomated
		ac.mutation.SetIsAutomated(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := approval.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ApprovalCreate) check() error {
	if _, ok := ac.mutation.IsAutomated(); !ok {
		return &ValidationError{Name: "is_automated", err: errors.New(`ent: missing required field "Approval.is_automated"`)}
	}
	if _, ok := ac.mutation.Approver(); !ok {
		return &ValidationError{Name: "approver", err: errors.New(`ent: missing required field "Approval.approver"`)}
	}
	if v, ok := ac.mutation.Approver(); ok {
		if err := approval.ApproverValidator(v); err != nil {
			return &ValidationError{Name: "approver", err: fmt.Errorf(`ent: validator failed for field "Approval.approver": %w`, err)}
		}
	}
	if len(ac.mutation.RequestIDs()) == 0 {
		return &ValidationError{Name: "Request", err: errors.New(`ent: missing required edge "Approval.Request"`)}
	}
	return nil
}

func (ac *ApprovalCreate) sqlSave(ctx context.Context) (*Approval, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ac *ApprovalCreate) createSpec() (*Approval, *sqlgraph.CreateSpec) {
	var (
		_node = &Approval{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: approval.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: approval.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.IsAutomated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: approval.FieldIsAutomated,
		})
		_node.IsAutomated = value
	}
	if value, ok := ac.mutation.Approver(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approval.FieldApprover,
		})
		_node.Approver = value
	}
	if nodes := ac.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   approval.RequestTable,
			Columns: approval.RequestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: request.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ApprovalCreateBulk is the builder for creating many Approval entities in bulk.
type ApprovalCreateBulk struct {
	config
	builders []*ApprovalCreate
}

// Save creates the Approval entities in the database.
func (acb *ApprovalCreateBulk) Save(ctx context.Context) ([]*Approval, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Approval, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApprovalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ApprovalCreateBulk) SaveX(ctx context.Context) []*Approval {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ApprovalCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ApprovalCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
