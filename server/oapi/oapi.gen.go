// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// NewProject defines model for NewProject.
type NewProject struct {
	Name string `json:"name"`
}

// NewService defines model for NewService.
type NewService struct {
	Name string `json:"name"`
}

// Project defines model for Project.
type Project struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// ProjectsResp defines model for ProjectsResp.
type ProjectsResp struct {
	Projects []Project `json:"projects"`
}

// Service defines model for Service.
type Service struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// ServicesResp defines model for ServicesResp.
type ServicesResp struct {
	Services []Service `json:"services"`
}

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {
	// name to filter by
	Name *[]string `form:"name,omitempty" json:"name,omitempty"`

	// maximum number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateProjectJSONBody defines parameters for CreateProject.
type CreateProjectJSONBody = NewProject

// GetServicesParams defines parameters for GetServices.
type GetServicesParams struct {
	// name to filter by
	Name *[]string `form:"name,omitempty" json:"name,omitempty"`

	// maximum number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateServiceJSONBody defines parameters for CreateService.
type CreateServiceJSONBody = NewService

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = CreateProjectJSONBody

// CreateServiceJSONRequestBody defines body for CreateService for application/json ContentType.
type CreateServiceJSONRequestBody = CreateServiceJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /projects)
	GetProjects(w http.ResponseWriter, r *http.Request, params GetProjectsParams)

	// (POST /projects)
	CreateProject(w http.ResponseWriter, r *http.Request)

	// (GET /projects/{id})
	GetProjectByID(w http.ResponseWriter, r *http.Request, id uuid.UUID)

	// (GET /services)
	GetServices(w http.ResponseWriter, r *http.Request, params GetServicesParams)

	// (POST /services)
	CreateService(w http.ResponseWriter, r *http.Request)

	// (GET /services/{id})
	GetServiceByID(w http.ResponseWriter, r *http.Request, id uuid.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectsParams

	// ------------- Optional query parameter "name" -------------
	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjects(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProject(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProjectByID operation middleware
func (siw *ServerInterfaceWrapper) GetProjectByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectByID(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetServices operation middleware
func (siw *ServerInterfaceWrapper) GetServices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServicesParams

	// ------------- Optional query parameter "name" -------------
	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetServices(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateService operation middleware
func (siw *ServerInterfaceWrapper) CreateService(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateService(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetServiceByID operation middleware
func (siw *ServerInterfaceWrapper) GetServiceByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetServiceByID(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects", wrapper.GetProjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects", wrapper.CreateProject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{id}", wrapper.GetProjectByID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/services", wrapper.GetServices)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/services", wrapper.CreateService)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/services/{id}", wrapper.GetServiceByID)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWS2/bRhD+K4tpjxSpODee2thGYaCIg7jpJfVhRQ6pDUjuZnZoWRD434tdvi3J0cFx",
	"K8AnPmZ2Ht88vt1BokujK6zYQrwDm6yxlP71mkiTezGkDRIr9L8TnaJ7ZppKyRCDqvj9BQTAW4PtJ+ZI",
	"0ARQorUy99qd0DKpKoemCYDwe60IU4i/tjZH/fvBmF59w4SdrY+4+UTaf+2FVMnyBCde64jpO6QHleCL",
	"m56ELIviNoP46w5+Jcwghl+iEfqowz2apNkET4NR6Qz4ulbpiHsXWgCPi1wvup9OJfzy5eZq+n+hSqOp",
	"xVHyGmLIFa/rVZjoMsq1zguMvO3maZ4qPZDl/Zin/YzW7INoOqnPgbH0L8+hMELQO5NEcruH+2D4EPaT",
	"mp6MfX/mnLDvYj6Cve2kJ2M/QvA89oPh/aicqqoy3a6LimU7AVhKVTi0auMw+O0BSWUyVBqCbs7gb/9L",
	"XBJuIICanPqa2dg4ikb1JoAUbULKsNIVxPDX7dVtLC61tFyoCoXFIlt0AUIAhUqwsjjOM/xuZLJGcREu",
	"99xsNptQenGoKY+6szb68+by+uPd9eIiXIZrLgsPkOLCmRs8QwAPSLaN6l24DJdOTRuspFEQw/vwnXfp",
	"au8rEU1nI0eP0zy3z8g1VUKKQlkWOhP9iX8q8KZJOs2bFGL4A7mfRO+EZImMZH3rz806IARrkamCkcRq",
	"C65mEMP3Gmk7VsQ/go4XZk30ZCU+bZcALG89Om5o/ETNIyjloyrrUlR1uUJymRHaumDrwiKf9ZGYClUq",
	"ngX1QzJq7l33WqNdLd2Ji+Wyb0+s2gVtTKESD2b0zboQdxMPJ6yrdgJ9988z7Som+gDaBs5kXfCLxdCy",
	"9QHndYWPBhPGVOCoY7Q90GuXhJLRCikq3PSNttdlrdanQeq2Alr+oNPti6Uz5cH9nDqRaxSZpu7BaxSW",
	"NSFMtxRTjc3PL/xZ1LwJxmUT7VTa/GDjuC7ok1hthaexY9vmw9aLn104N1eT5eU3D3Ky7ifck+Ew4J5b",
	"52U8OO2vwcL3b/0z9M/0MnEaWfUnDpNVf3V5I6vXI6vZdfFA7buKnRtZjbe9Q2R1N0h/ElkNt+b9nDrR",
	"f05Wz4T4v6v5dNmcSlZ9EkfJqgPgdLKyY+XeyOq8+qdp/g0AAP//NIv/VNoSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
