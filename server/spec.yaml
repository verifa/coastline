openapi: "3.1.0"
info:
  version: 1.0.0
  title: Coastline
  description: "TODO: Coastline self-service"
  contact:
    name: Verifa Crew
    email: support@verifa.io
    url: https://verifa.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
# servers:
#   - url: http://petstore.swagger.io/api
paths:
  #
  # Projects
  #
  /projects:
    get:
      description: |
        Return a list of projects
      operationId: getProjects
      parameters:
        - name: name
          in: query
          description: name to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: project response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectsResp"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Creates a new project
      operationId: createProject
      requestBody:
        description: Project to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewProject"
      responses:
        "200":
          description: project response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /projects/{id}:
    get:
      description: Returns a project by ID
      operationId: getProjectByID
      parameters:
        - name: id
          in: path
          description: ID of project to fetch
          required: true
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/google/uuid
      responses:
        "200":
          description: project response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  #
  # Services
  #
  /services:
    get:
      description: |
        Return a list of services
      operationId: getServices
      parameters:
        - name: name
          in: query
          description: name to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: service response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicesResp"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Creates a new service
      operationId: createService
      requestBody:
        description: Service to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewService"
      responses:
        "200":
          description: service response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /services/{id}:
    get:
      description: Returns a service by ID
      operationId: getServiceByID
      parameters:
        - name: id
          in: path
          description: ID of service to fetch
          required: true
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/google/uuid
      responses:
        "200":
          description: service response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /services/{id}/templates:
    get:
      description: Returns request templates available for this service
      operationId: getRequestTemplatesForService
      parameters:
        - name: id
          in: path
          description: ID of service to fetch
          required: true
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/google/uuid
      responses:
        "200":
          description: service response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestTemplatesResp"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  #
  # Requests
  #
  /requests:
    get:
      description: |
        Return a list of requests
      operationId: getRequests
      parameters:
        - name: name
          in: query
          description: name to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: request response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestsResp"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Creates a new request
      operationId: createRequest
      requestBody:
        description: Request to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewRequest"
      responses:
        "200":
          description: request response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Request"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /requests/{id}:
    get:
      description: Returns a request by ID
      operationId: getRequestByID
      parameters:
        - name: id
          in: path
          description: ID of request to fetch
          required: true
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/google/uuid
      responses:
        "200":
          description: request response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Request"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /requests/{id}/review:
    post:
      description: Review a request
      operationId: reviewRequest
      parameters:
        - name: id
          in: path
          description: ID of request to review
          required: true
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/google/uuid
      requestBody:
        description: Review to add to request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewRequest"
      responses:
        "200":
          description: review response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /templates/{id}/openapi:
    get:
      description: |
        Return OpenAPI specification for request template
      operationId: getRequestTemplateSpec
      parameters:
        - name: id
          in: path
          description: ID (type) of the request template
          required: true
          schema:
            type: string
      responses:
        "200":
          description: request template OpenAPI specification response
          content:
            application/json:
              schema:
                type: object
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /userinfo:
    get:
      description: |
        Return information about authenticated user
      operationId: getUserInfo
      responses:
        "200":
          description: user info response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  #   delete:
  #     description: deletes a single pet based on the ID supplied
  #     operationId: deletePet
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of pet to delete
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "204":
  #         description: pet deleted
  #       default:
  #         description: unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
components:
  schemas:
    #
    # Project types
    #
    Project:
      allOf:
        - $ref: "#/components/schemas/NewProject"
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: uuid
              x-go-type: uuid.UUID
              x-go-type-import:
                path: github.com/google/uuid
    NewProject:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    ProjectsResp:
      type: object
      required:
        - projects
      properties:
        projects:
          type: array
          items:
            $ref: "#/components/schemas/Project"
    #
    # Service types
    #
    Service:
      allOf:
        - $ref: "#/components/schemas/NewService"
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: uuid
              x-go-type: uuid.UUID
              x-go-type-import:
                path: github.com/google/uuid
    NewService:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
    ServicesResp:
      type: object
      required:
        - services
      properties:
        services:
          type: array
          items:
            $ref: "#/components/schemas/Service"
    #
    # Request types
    #
    RequestCommon:
      type: object
      required:
        - type
        - requested_by
        - status
        - spec
      properties:
        type:
          type: string
        requested_by:
          type: string
        status:
          type: string
          enum: ["pending_approval", "rejected", "approved"]
        spec:
          type: object
    Request:
      allOf:
        - $ref: "#/components/schemas/RequestCommon"
        - type: object
          required:
            - id
            - project
            - service
            - reviews
          properties:
            id:
              type: string
              format: uuid
              x-go-type: uuid.UUID
              x-go-type-import:
                path: github.com/google/uuid
            project:
              $ref: "#/components/schemas/Project"
            service:
              $ref: "#/components/schemas/Service"
            reviews:
              type: array
              items:
                $ref: "#/components/schemas/Review"
    NewRequest:
      allOf:
        - $ref: "#/components/schemas/RequestCommon"
        - type: object
          required:
            - project_id
            - service_id
          properties:
            project_id:
              type: string
              format: uuid
              x-go-type: uuid.UUID
              x-go-type-import:
                path: github.com/google/uuid
            service_id:
              type: string
              format: uuid
              x-go-type: uuid.UUID
              x-go-type-import:
                path: github.com/google/uuid

    RequestsResp:
      type: object
      required:
        - requests
      properties:
        requests:
          type: array
          items:
            $ref: "#/components/schemas/Request"

    #
    # Request Template types
    #
    RequestTemplate:
      type: object
      required:
        - type
      properties:
        type:
          type: string
    RequestTemplatesResp:
      type: object
      required:
        - templates
      properties:
        templates:
          type: array
          items:
            $ref: "#/components/schemas/RequestTemplate"
    #
    # Review types
    #
    Review:
      allOf:
        - $ref: "#/components/schemas/NewReview"
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: uuid
              x-go-type: uuid.UUID
              x-go-type-import:
                path: github.com/google/uuid
    NewReview:
      type: object
      required:
        - status
        - type
      properties:
        status:
          type: string
          enum: ["reject", "approve"]
        type:
          type: string
          enum: ["user", "auto"]

    UserInfo:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        given_name:
          type: string
        family_name:
          type: string
        email:
          type: string
        picture:
          type: string
    # TODO: remove this as we probably don't need it.
    # Responses already have a code/status (in header)
    # and the message is sent as plain text
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string
