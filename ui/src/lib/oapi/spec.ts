/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/projects": {
    /** Return a list of projects */
    get: operations["getProjects"];
    /** Creates a new project */
    post: operations["createProject"];
  };
  "/projects/{id}": {
    /** Returns a project by ID */
    get: operations["getProjectByID"];
  };
  "/services": {
    /** Return a list of services */
    get: operations["getServices"];
    /** Creates a new service */
    post: operations["createService"];
  };
  "/services/{id}": {
    /** Returns a service by ID */
    get: operations["getServiceByID"];
  };
  "/requests": {
    /** Return a list of requests */
    get: operations["getRequests"];
    /** Creates a new request */
    post: operations["createRequest"];
  };
  "/requests/{id}": {
    /** Returns a request by ID */
    get: operations["getRequestByID"];
  };
  "/requests/{id}/review": {
    /** Review a request */
    post: operations["reviewRequest"];
  };
  "/requestsspec": {
    /** Return OpenAPI specification for request types */
    get: operations["getRequestsSpec"];
  };
  "/userinfo": {
    /** Return information about authenticated user */
    get: operations["getUserInfo"];
  };
}

export interface components {
  schemas: {
    Project: components["schemas"]["NewProject"] & {
      /** Format: uuid */
      id: string;
    };
    NewProject: {
      name: string;
    };
    ProjectsResp: {
      projects: components["schemas"]["Project"][];
    };
    Service: components["schemas"]["NewService"] & {
      /** Format: uuid */
      id: string;
    };
    NewService: {
      name: string;
    };
    ServicesResp: {
      services: components["schemas"]["Service"][];
    };
    RequestCommon: {
      type: string;
      requested_by: string;
      /** @enum {string} */
      status: "pending_approval" | "rejected" | "approved";
      spec: { [key: string]: unknown };
    };
    Request: components["schemas"]["RequestCommon"] & {
      /** Format: uuid */
      id: string;
      project: components["schemas"]["Project"];
      service: components["schemas"]["Service"];
      reviews: components["schemas"]["Review"][];
    };
    NewRequest: components["schemas"]["RequestCommon"] & {
      /** Format: uuid */
      project_id: string;
      /** Format: uuid */
      service_id: string;
    };
    RequestsResp: {
      requests: components["schemas"]["Request"][];
    };
    Review: components["schemas"]["NewReview"] & {
      /** Format: uuid */
      id: string;
    };
    NewReview: {
      /** @enum {string} */
      status: "reject" | "approve";
      /** @enum {string} */
      type: "user" | "auto";
    };
    UserInfo: {
      name: string;
      given_name?: string;
      family_name?: string;
      email?: string;
      picture?: string;
    };
    Error: {
      code: number;
      message: string;
    };
  };
}

export interface operations {
  /** Return a list of projects */
  getProjects: {
    parameters: {
      query: {
        /** name to filter by */
        name?: string[];
        /** maximum number of results to return */
        limit?: number;
      };
    };
    responses: {
      /** project response */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectsResp"];
        };
      };
      /** unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new project */
  createProject: {
    responses: {
      /** project response */
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Project to add to the store */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewProject"];
      };
    };
  };
  /** Returns a project by ID */
  getProjectByID: {
    parameters: {
      path: {
        /** ID of project to fetch */
        id: string;
      };
    };
    responses: {
      /** project response */
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Return a list of services */
  getServices: {
    parameters: {
      query: {
        /** name to filter by */
        name?: string[];
        /** maximum number of results to return */
        limit?: number;
      };
    };
    responses: {
      /** service response */
      200: {
        content: {
          "application/json": components["schemas"]["ServicesResp"];
        };
      };
      /** unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new service */
  createService: {
    responses: {
      /** service response */
      200: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      /** unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Service to add to the store */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewService"];
      };
    };
  };
  /** Returns a service by ID */
  getServiceByID: {
    parameters: {
      path: {
        /** ID of service to fetch */
        id: string;
      };
    };
    responses: {
      /** service response */
      200: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      /** unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Return a list of requests */
  getRequests: {
    parameters: {
      query: {
        /** name to filter by */
        name?: string[];
        /** maximum number of results to return */
        limit?: number;
      };
    };
    responses: {
      /** request response */
      200: {
        content: {
          "application/json": components["schemas"]["RequestsResp"];
        };
      };
      /** unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Creates a new request */
  createRequest: {
    responses: {
      /** request response */
      200: {
        content: {
          "application/json": components["schemas"]["Request"];
        };
      };
      /** unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Request to add to the store */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewRequest"];
      };
    };
  };
  /** Returns a request by ID */
  getRequestByID: {
    parameters: {
      path: {
        /** ID of request to fetch */
        id: string;
      };
    };
    responses: {
      /** request response */
      200: {
        content: {
          "application/json": components["schemas"]["Request"];
        };
      };
      /** unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Review a request */
  reviewRequest: {
    parameters: {
      path: {
        /** ID of request to review */
        id: string;
      };
    };
    responses: {
      /** review response */
      200: {
        content: {
          "application/json": components["schemas"]["Review"];
        };
      };
      /** unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Review to add to request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewRequest"];
      };
    };
  };
  /** Return OpenAPI specification for request types */
  getRequestsSpec: {
    responses: {
      /** request spec response */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      /** unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Return information about authenticated user */
  getUserInfo: {
    responses: {
      /** user info response */
      200: {
        content: {
          "application/json": components["schemas"]["UserInfo"];
        };
      };
      /** unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}

export interface external {}
